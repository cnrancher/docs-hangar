"use strict";(self.webpackChunkhangar_docs=self.webpackChunkhangar_docs||[]).push([[9814],{9740:(r,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var t=i(5893),n=i(1151);const a={title:"Mirror Command"},o=void 0,s={id:"mirror/mirror",title:"Mirror Command",description:"hangar mirror command is for mirror multiple container images between image registry servers. It allows you to specify architecture and platforms when copying image, and use multiple workers to copy images parallelly.",source:"@site/docs/10-mirror/01-mirror.md",sourceDirName:"10-mirror",slug:"/mirror/mirror",permalink:"/zh/docs/next/mirror/mirror",draft:!1,unlisted:!1,editUrl:"https://github.com/cnrancher/docs-hangar/edit/main/docs/10-mirror/01-mirror.md",tags:[],version:"current",lastUpdatedAt:1700627436,formattedLastUpdatedAt:"2023\u5e7411\u670822\u65e5",sidebarPosition:1,frontMatter:{title:"Mirror Command"},sidebar:"tutorialSidebar",previous:{title:"Mirror",permalink:"/zh/docs/next/mirror/xxx"},next:{title:"Mirror Validate Command",permalink:"/zh/docs/next/mirror/validate"}},l={},m=[{value:"Quick Start",id:"quick-start",level:2},{value:"Usage",id:"usage",level:2},{value:"Image List Format",id:"image-list-format",level:2}];function c(r){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"hangar mirror"})," command is for mirror multiple container images between image registry servers. It allows you to specify architecture and platforms when copying image, and use multiple workers to copy images parallelly."]}),"\n",(0,t.jsx)(e.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(e.p,{children:"Use following command to mirror multiple images between image registry servers parallelly:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"hangar mirror \\\n    --file=IMAGE_LIST.txt \\\n    --source=[SOURCE_REGISTRY_URL] \\\n    --destination=[DESTINATION_REGISTRY_URL] \\\n    --arch=amd64,arm64 \\\n    --os=linux \\\n    --jobs=4\n"})}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-txt",metastring:'title="hangar mirror --help"',children:'Mirror images between registry servers\n\nUsage:\n  hangar mirror -f IMAGE_LIST.txt -d DESTINATION_REGISTRY [flags]\n  hangar mirror [command]\n\nExamples:\n# Mirror images from SOURCE REGISTRY to DESTINATION REGISTRY.\nhangar mirror \\\n        --file IMAGE_LIST.txt \\\n        --source SOURCE_REGISTRY \\\n        --destination DESTINATION_REGISTRY \\\n        --arch amd64,arm64 \\\n        --os linux\n\nAvailable Commands:\n  validate    Ensure the images were mirrored correctly\n\nFlags:\n  -a, --arch strings                 architecture list of images (default [amd64,arm64])\n  -d, --destination string           specify the destination image registry\n      --destination-project string   override all destination image projects\n  -o, --failed string                file name of the mirror failed image list (default "mirror-failed.txt")\n  -f, --file string                  image list file\n  -h, --help                         help for mirror\n  -j, --jobs int                     worker number, copy images parallelly (1-20) (default 1)\n      --os strings                   OS list of images (default [linux])\n      --skip-login                   skip check the destination registry is logged in (used in shell script)\n  -s, --source string                override the source registry in image list\n      --source-project string        override all source image projects\n      --timeout duration             timeout when mirror each images (default 10m0s)\n      --tls-verify                   require HTTPS and verify certificates\n\nGlobal Flags:\n      --debug             enable debug output\n      --insecure-policy   run Hangar without policy check\n\nUse "hangar mirror [command] --help" for more information about a command.\n'})}),"\n",(0,t.jsx)(e.h2,{id:"image-list-format",children:"Image List Format"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"hangar mirror"})," command supports two different kinds of image list formats, see ",(0,t.jsx)(e.a,{href:"image-list-format",children:"Image List Formats"})," for image list format specification."]})]})}function d(r={}){const{wrapper:e}={...(0,n.a)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(c,{...r})}):c(r)}},1151:(r,e,i)=>{i.d(e,{Z:()=>s,a:()=>o});var t=i(7294);const n={},a=t.createContext(n);function o(r){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function s(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(n):r.components||n:o(r.components),t.createElement(a.Provider,{value:e},r.children)}}}]);