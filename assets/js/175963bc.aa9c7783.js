"use strict";(self.webpackChunkdocs_hangar=self.webpackChunkdocs_hangar||[]).push([[1637],{954:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"sign/validate","title":"Validate the signed image signature","description":"Use hangar sign validate command for validate the signed image sigstore signature.","source":"@site/versioned_docs/version-v1.9/14-sign/03-validate.md","sourceDirName":"14-sign","slug":"/sign/validate","permalink":"/docs/v1.9/sign/validate","draft":false,"unlisted":false,"editUrl":"https://github.com/cnrancher/docs-hangar/edit/main/versioned_docs/version-v1.9/14-sign/03-validate.md","tags":[],"version":"v1.9","lastUpdatedAt":1741617733000,"sidebarPosition":3,"frontMatter":{"title":"Validate the signed image signature"},"sidebar":"docs","previous":{"title":"Sign images with sigstore key-pair","permalink":"/docs/v1.9/sign/sign"},"next":{"title":"Scan","permalink":"/docs/v1.9/scan/"}}');var s=t(4848),a=t(8453);const r={title:"Validate the signed image signature"},o=void 0,l={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["Use ",(0,s.jsx)(i.code,{children:"hangar sign validate"})," command for validate the signed image sigstore signature."]}),"\n",(0,s.jsxs)(i.admonition,{type:"note",children:[(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"hangar sign"})," command in version ",(0,s.jsx)(i.code,{children:"1.8"})," is renamed to ",(0,s.jsx)(i.code,{children:"signv1"})," in version ",(0,s.jsx)(i.code,{children:"1.9"})," and marked as deprecated."]}),(0,s.jsxs)(i.p,{children:["Use ",(0,s.jsx)(i.code,{children:"hangar signv1 --help"})," to use the old sign V1 features."]})]}),"\n",(0,s.jsx)(i.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsxs)(i.p,{children:["Use following command to verify the signed image after executing the ",(0,s.jsx)(i.a,{href:"sign",children:"sign"})," command."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'#!/bin/bash\n\nhangar sign validate \\\n    --file="example_image_list.txt" \\\n    --sigstore-pubkey="sigstore.pub" \\\n    --registry="REGISTRY_SERVER_URL" \\\n    --jobs=4\n'})}),"\n",(0,s.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-txt",metastring:'title="hangar sign validate --help"',children:'Validate the signed images with cosign sigstore public key\n\nUsage:\n  hangar sign validate -f IMAGE_LIST.txt [flags]\n\nExamples:\n# Validate the signed images by sigstore public key file.\nhangar sign validate \\\n        --file IMAGE_LIST.txt \\\n        --key cosign.pub \\\n        --arch amd64,arm64 \\\n        --os linux\n\nFlags:\n  -a, --arch strings                     architecture list of images (default [amd64,arm64])\n  -y, --auto-yes                         answer yes automatically (used in shell script)\n      --certificate-identity string      The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Must be set for keyless flows.\n      --certificate-oidc-issuer string   The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Must be set for keyless flows.\n  -o, --failed string                    file name of the sign failed image list (default "sign-failed.txt")\n  -f, --file string                      image list file\n      --format string                    output report format (available: json,yaml,csv) (default "json")\n  -h, --help                             help for validate\n      --insecure-ignore-tlog             ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log.\n  -j, --jobs int                         worker number, copy images parallelly (1-20) (default 1)\n  -k, --key string                       path to the cosign public key file\n      --os strings                       OS list of images (default [linux])\n      --project string                   override all image projects in image list\n      --registry string                  override all image registry URL in image list\n      --rekor-url string                 address of rekor STL server (default "https://rekor.sigstore.dev")\n  -r, --report string                    sign validate report output file (default "sign-validate-report.[FORMAT]")\n      --timeout duration                 timeout when validate each images (default 10m0s)\n      --tls-verify                       require HTTPS and verify certificates\n\nGlobal Flags:\n      --debug             enable debug output\n      --insecure-policy   run Hangar without policy check\n'})})]})}function g(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>o});var n=t(6540);const s={},a=n.createContext(s);function r(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);