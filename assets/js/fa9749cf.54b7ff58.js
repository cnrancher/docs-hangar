"use strict";(self.webpackChunkdocs_hangar=self.webpackChunkdocs_hangar||[]).push([[3222],{2625:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var n=i(4848),s=i(8453);const t={title:"Mirror Command"},a=void 0,o={id:"mirror/mirror",title:"Mirror Command",description:"hangar mirror command is for mirror multiple container images between image registry servers. It allows you to specify architecture and platforms when copying image, and use multiple workers to copy images parallelly.",source:"@site/versioned_docs/version-v1.8/10-mirror/01-mirror.md",sourceDirName:"10-mirror",slug:"/mirror/mirror",permalink:"/docs/v1.8/mirror/mirror",draft:!1,unlisted:!1,editUrl:"https://github.com/cnrancher/docs-hangar/edit/main/versioned_docs/version-v1.8/10-mirror/01-mirror.md",tags:[],version:"v1.8",lastUpdatedAt:1732247558e3,sidebarPosition:1,frontMatter:{title:"Mirror Command"},sidebar:"docs",previous:{title:"Mirror",permalink:"/docs/v1.8/mirror/"},next:{title:"Mirror Validate Command",permalink:"/docs/v1.8/mirror/validate"}},l={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Image List Format",id:"image-list-format",level:2},{value:"Usage",id:"usage",level:2},{value:"Override project name when mirror images",id:"override-project-name-when-mirror-images",level:2},{value:"Sign images with sigstore private key when copy",id:"sign-images-with-sigstore-private-key-when-copy",level:2},{value:"Overwrite exist manifest index",id:"overwrite-exist-manifest-index",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"hangar mirror"})," command is for mirror multiple container images between image registry servers. It allows you to specify architecture and platforms when copying image, and use multiple workers to copy images parallelly."]}),"\n",(0,n.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,n.jsx)(r.p,{children:"Use following command to mirror multiple images between image registry servers parallelly:"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Prepare an example image list file."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="example_image_list.txt"',children:"cnrancher/hangar:latest\ncnrancher/hangar:v1.8.0\n# Add more images here...\n"})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Hangar ",(0,n.jsx)(r.code,{children:"mirror"})," command supports two kinds of image list file formats, the image list file in this example is in ",(0,n.jsx)(r.code,{children:"default"})," format. See ",(0,n.jsx)(r.a,{href:"/docs/v1.8/mirror/image-list-format",children:"Image List Formats"})," for image list format specification."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["Run following command to mirror ",(0,n.jsx)(r.strong,{children:"amd64 & arm64, linux"})," container images by image list file from ",(0,n.jsx)(r.em,{children:"SOURCE REGISTRY"})," to ",(0,n.jsx)(r.em,{children:"DESTINATION REGISTRY"})," parallelly."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:'#!/bin/bash\n\nhangar mirror \\\n    --file="example_image_list.txt" \\\n    --source=SOURCE_REGISTRY_URL \\\n    --destination=DESTINATION_REGISTRY_URL \\\n    --arch=amd64,arm64 \\\n    --os=linux \\\n    --jobs=4\n'})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["Use ",(0,n.jsx)(r.a,{href:"/docs/v1.8/advanced/inspect",children:"inspect"})," command to view the copied image manifest."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hangar inspect --raw docker://DESTINATION_REGISTRY_URL/cnrancher/hangar:latest\n"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"image-list-format",children:"Image List Format"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"hangar mirror"})," command supports two different kinds of image list formats, see ",(0,n.jsx)(r.a,{href:"/docs/v1.7/mirror/image-list-format",children:"Image List Formats"})," for image list format specification."]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="hangar mirror --help"',children:'Mirror images between registry servers\n\nUsage:\n  hangar mirror -f IMAGE_LIST.txt -d DESTINATION_REGISTRY [flags]\n  hangar mirror [command]\n\nExamples:\n# Mirror images from SOURCE REGISTRY to DESTINATION REGISTRY.\nhangar mirror \\\n        --file IMAGE_LIST.txt \\\n        --source SOURCE_REGISTRY \\\n        --destination DESTINATION_REGISTRY \\\n        --arch amd64,arm64 \\\n        --os linux \\\n        --sigstore-private-key SIGSTORE.key\n\nAvailable Commands:\n  validate    Ensure the images were mirrored correctly\n\nFlags:\n  -a, --arch strings                      architecture list of images (default [amd64,arm64])\n  -d, --destination string                specify the destination image registry\n      --destination-project string        override all destination image projects\n  -o, --failed string                     file name of the mirror failed image list (default "mirror-failed.txt")\n  -f, --file string                       image list file\n  -h, --help                              help for mirror\n  -j, --jobs int                          worker number, copy images parallelly (1-20) (default 1)\n      --os strings                        OS list of images (default [linux])\n      --overwrite                         overwrite exist manifest index in destination registry\n      --provenance                        copy SLSA provenance (default true)\n      --remove-signatures                 do not copy image signatures when mirror images\n      --sigstore-passphrase-file string   passphrase file of the sigstore private key\n      --sigstore-private-key string       sign images by sigstore private key when mirror images\n      --skip-login                        skip check the destination registry is logged in (used in shell script)\n  -s, --source string                     override the source registry in image list\n      --source-project string             override all source image projects\n      --timeout duration                  timeout when mirror each images (default 10m0s)\n      --tls-verify                        require HTTPS and verify certificates\n\nGlobal Flags:\n      --debug             enable debug output\n      --insecure-policy   run Hangar without policy check\n\nUse "hangar mirror [command] --help" for more information about a command.\n'})}),"\n",(0,n.jsx)(r.h2,{id:"override-project-name-when-mirror-images",children:"Override project name when mirror images"}),"\n",(0,n.jsxs)(r.p,{children:["Hangar ",(0,n.jsx)(r.code,{children:"mirror"})," command provides some advanced options to customize the project name (namespace) of the ",(0,n.jsx)(r.em,{children:"SOURCE IMAGE"})," and ",(0,n.jsx)(r.em,{children:"DESTINATION IMAGE"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["You can use the ",(0,n.jsx)(r.code,{children:"--source-project"})," option to override all source image projects and ",(0,n.jsx)(r.code,{children:"--destination-project"})," option to override all destination image projects in the image list file."]}),"\n",(0,n.jsx)(r.p,{children:"Here is an example:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["The example ",(0,n.jsx)(r.code,{children:"Default"})," format image list file contains images on Docker Hub with different projects (",(0,n.jsx)(r.code,{children:"library"})," and ",(0,n.jsx)(r.code,{children:"cnrancher"}),")."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="example.txt"',children:"docker.io/library/nginx:latest\ndocker.io/cnrancher/hangar:latest\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["Use the ",(0,n.jsx)(r.code,{children:"--destination-project"})," option to mirror these images to another user on Docker Hub."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-shell-session",children:'$ hangar mirror -f "example.txt" --destination-project="USERNAME"\n[17:00:00] [INFO] [IMG:1] Copying [docker.io/library/nginx:latest] => [docker.io/USERNAME/nginx:latest]\n[17:00:00] [INFO] [IMG:2] Copying [docker.io/cnrancher/hangar:latest] => [docker.io/USERNAME/hangar:latest]\n......\n'})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"sign-images-with-sigstore-private-key-when-copy",children:"Sign images with sigstore private key when copy"}),"\n",(0,n.jsxs)(r.p,{children:["Starting from ",(0,n.jsx)(r.code,{children:"v1.8.0"}),", you can specify the sigstore private key by with ",(0,n.jsx)(r.code,{children:"--sigstore-private-key"})," option to sign images when mirroring."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:'hangar mirror \\\n    --file "example.txt" \\\n    --source "SOURCE_REGISTRY" \\\n    --destination "DESTINATION_REGISTRY" \\\n    --sigstore-private-key "sigstore.key"\n'})}),"\n",(0,n.jsxs)(r.p,{children:["By default, the ",(0,n.jsx)(r.code,{children:"mirror"})," command will copy the sigstore signature to the destination registry server if the source image is already signed. You can specify the ",(0,n.jsx)(r.code,{children:"--remove-signatures"})," option to disable sigstore signature copy when mirroring container images."]}),"\n",(0,n.jsx)(r.h2,{id:"overwrite-exist-manifest-index",children:"Overwrite exist manifest index"}),"\n",(0,n.jsxs)(r.p,{children:["Starting from ",(0,n.jsx)(r.code,{children:"v1.8.7"}),", you can use ",(0,n.jsx)(r.code,{children:"--overwrite"})," option to overwrite existing manifest list in destination registry server when copy images."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:'hangar mirror \\\n    --file "example.txt" \\\n    --source "SOURCE_REGISTRY" \\\n    --destination "DESTINATION_REGISTRY" \\\n    --overwrite=true\n'})}),"\n",(0,n.jsxs)(r.p,{children:["By default, hangar will merge the new images into existing manifest list in destination registry server, if unexpected problem with the manifest list of the image copied to the destination registry, use the ",(0,n.jsx)(r.code,{children:"--overwrite"})," option to fix it."]})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>o});var n=i(6540);const s={},t=n.createContext(s);function a(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);